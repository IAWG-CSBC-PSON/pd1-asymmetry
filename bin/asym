#!/usr/bin/env python3

import click
import numpy as np


@click.group()
def cli():
    pass


@cli.command()
@click.argument("cell_stack", type=click.File("rb"))
@click.argument("output_folder", type=click.Path(resolve_path=True))
@click.option(
    "--image-channel",
    default=None,
    type=int,
    help="The index of the image channel used for training."
    "If none supplied it is assumed that there is no dimension in"
    "the input for channels.",
    show_default=True,
)
@click.option(
    "--cpus",
    default=2,
    type=int,
    help="Number of CPUs used for loading data",
    show_default=True,
)
@click.option(
    "--nz", default=10, type=int, help="Size of latent dimension.", show_default=True
)
@click.option(
    "--epochs",
    default=20,
    type=int,
    help="Number of epochs used for training.",
    show_default=True,
)
@click.option(
    "--log-interval",
    default=10,
    type=int,
    help="how many batches to wait before logging training status",
    show_default=True,
)
@click.option("--seed", default=1, type=int, help="Random seed", show_default=True)
@click.option(
    "--batch-size",
    default=16,
    type=int,
    help="Input batch size for training",
    show_default=True,
)
@click.option(
    "--learning-rate",
    default=5e-4,
    type=float,
    help="Learning rate for training",
    show_default=True,
)
@click.option(
    "--cuda/--no-cuda",
    default=True,
    help="Enable training on GPU using CUDA",
    show_default=True,
)
@click.option(
    "--normalize/--no-normalize",
    default=True,
    help="Normalize data to [0, 1] range before training",
    show_default=True,
)
@click.option(
    "--rotate/--no-rotate",
    default=True,
    help="Rotate cells so that brightest point points up before training",
    show_default=True,
)
@click.option(
    "--augment/--no-augment",
    default=True,
    help="Augment input images by random rotations and reflections during training",
    show_default=True,
)
@click.option(
    "--model-instance",
    type=click.File("rb"),
    help="Path to pickle file containing pre-made model instance",
)
def train(
    cell_stack,
    output_folder,
    image_channel,
    cpus,
    nz,
    epochs,
    log_interval,
    seed,
    batch_size,
    learning_rate,
    cuda,
    normalize,
    rotate,
    augment,
    model_instance=None,
):
    """Train autoencoder network

    Expected input is a numpy array in the shape (n_cells, n_image_channels, x, y)
    and a path to an output folder where results will be stored.

    Training only uses the selected image channel, all other channels are ignored.
    """
    from asym.vae_train import train_vae
    import torch

    if model_instance is not None:
        model_instance = torch.load(model_instance)
    all_tiles = np.load(cell_stack)

    train_vae(
        all_tiles,
        str(output_folder),
        nz=nz,
        cpus=cpus,
        batch_size=batch_size,
        learning_rate=learning_rate,
        epochs=epochs,
        cuda=cuda,
        seed=seed,
        log_interval=log_interval,
        normalize=normalize,
        rotate=rotate,
        augment=augment,
        model_instance=model_instance,
    )


@cli.command()
@click.argument("encodings", type=click.File("r"))
@click.argument("metadata", type=click.File("r"))
@click.argument("save_path", type=click.File("w"))
def umap(encodings, metadata, save_path):
    """Compute UMAP embedding of cells"""
    from asym.run_umap import run_umap

    run_umap(encodings, metadata, save_path)


@cli.command()
@click.argument("cell_stack", type=click.File("rb"))
@click.argument("cell_data", type=click.File("r"))
@click.option(
    "--markers",
    type=click.File("r"),
    default=None,
    help="Path to file with marker names for cell stack, one per line.",
)
@click.option("--port", default=5000, help="Server port.", show_default=True)
@click.option(
    "--default-umap-marker", help="Select specific marker as default for UMAP plot"
)
@click.option(
    "--default-cell-marker", help="Select specific marker as default for cell plot"
)
@click.option("--url-prefix", help="Add prefix to all URLS")
def vis(
    cell_stack,
    cell_data,
    markers,
    port,
    default_umap_marker,
    default_cell_marker,
    url_prefix,
):
    """Visualize UMAP embedding of cells"""
    import asym
    import os
    import pandas as pd
    from asym.vis import run_server
    from bokeh.settings import settings
    from bokeh.server.auth_provider import AuthModule

    input_data = pd.read_csv(cell_data, index_col=False)
    cell_stack = np.load(cell_stack)
    if markers is not None:
        markers = [l.strip() for l in markers.readlines()]
    server_kwargs = {}
    settings.auth_module = os.path.join(asym.__path__[0], "auth.py")
    if url_prefix:
        server_kwargs["prefix"] = url_prefix
        asym.url_prefix = url_prefix
    if settings.secret_key() is not None and settings.cookie_secret() is not None:
        try:
            auth_kwargs = {
                "auth_provider": AuthModule(settings.auth_module()),
                "secret_key": settings.secret_key(),
                "sign_sessions": True,
                "cookie_secret": settings.cookie_secret(),
            }
        except Exception as e:
            print(f"Error setting up authentication: {e}\n")
        else:
            server_kwargs.update(auth_kwargs)
    run_server(
        cell_stack=cell_stack,
        input_data=input_data,
        markers=markers,
        port=port,
        default_umap_marker=default_umap_marker,
        default_cell_marker=default_cell_marker,
        server_kwargs=server_kwargs,
    )


@cli.command()
@click.argument("cell_stack", type=click.File("rb"))
@click.argument("cell_data", type=click.File("r"))
@click.option(
    "--markers",
    type=click.File("r"),
    default=None,
    help="Path to file with marker names for cell stack, one per line.",
)
@click.option("--port", default=5000, help="Server port.", show_default=True)
@click.option(
    "--default-cell-marker", help="Select specific marker as default for cell plot"
)
@click.option("--url-prefix", help="Add prefix to all URLS")
def classify(cell_stack, cell_data, markers, port, default_cell_marker, url_prefix):
    """Manually classify cells"""
    import asym
    import os
    import pandas as pd
    from asym.classify import run_server
    from bokeh.settings import settings
    from bokeh.server.auth_provider import AuthModule

    input_data = pd.read_csv(cell_data, index_col=False)
    cell_stack = np.load(cell_stack)
    if markers is not None:
        markers = [l.strip() for l in markers.readlines()]
    server_kwargs = {}
    if url_prefix:
        server_kwargs["prefix"] = url_prefix
        asym.url_prefix = url_prefix
    settings.auth_module = os.path.join(asym.__path__[0], "auth.py")
    if settings.secret_key() is not None and settings.cookie_secret() is not None:
        try:
            auth_kwargs = {
                "auth_provider": AuthModule(settings.auth_module()),
                "secret_key": settings.secret_key(),
                "sign_sessions": True,
                "cookie_secret": settings.cookie_secret(),
            }
        except Exception as e:
            print(f"Error setting up authentication: {e}\n")
        else:
            server_kwargs.update(auth_kwargs)
    run_server(
        cell_stack=cell_stack,
        input_data=input_data,
        markers=markers,
        port=port,
        default_cell_marker=default_cell_marker,
        server_kwargs=server_kwargs,
    )


if __name__ == "__main__":
    cli()
