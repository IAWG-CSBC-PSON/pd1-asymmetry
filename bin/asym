#!/usr/bin/env python3

import click
from functools import partial
import numpy as np


@click.group()
def cli():
    pass


@cli.command()
@click.argument("cell_stack", type=click.File("rb"))
@click.argument("output_folder", type=click.Path(resolve_path=True))
@click.option(
    "--cpus", default=2, type=int, help="Number of CPUs used for loading data"
)
@click.option("--nz", default=10, type=int, help="Size of latent dimension.")
@click.option(
    "--epochs", default=20, type=int, help="Number of epochs used for training."
)
@click.option(
    "--log-interval",
    default=10,
    type=int,
    help="how many batches to wait before logging training status",
)
@click.option("--seed", default=1, type=int, help="Random seed")
@click.option(
    "--batch_size", default=16, type=int, help="Input batch size for training"
)
@click.option(
    "--cuda/--no-cuda", default=True, help="Enable training on GPU using CUDA"
)
def train(
    cell_stack, output_folder, cpus, nz, epochs, log_interval, seed, batch_size, cuda
):
    """Train autoencoder network"""
    from asym.vae_train import train_vae

    all_tiles = np.load(cell_stack)
    train_vae(
        all_tiles,
        str(output_folder),
        nz=nz,
        cpus=cpus,
        batch_size=batch_size,
        epochs=epochs,
        cuda=cuda,
        seed=seed,
        log_interval=log_interval,
    )


@cli.command()
@click.argument("encodings", type=click.File("r"))
@click.argument("metadata", type=click.File("r"))
@click.option("--save_path", default=None, type=click.File("w"))
def umap(encodings, metadata, save_path):
    """Compute UMAP embedding of cells"""
    from asym.run_umap import run_umap

    run_umap(encodings, metadata, save_path)


@cli.command()
@click.argument("cell_stack", type=click.File("rb"))
@click.argument("cell_data", type=click.File("r"))
@click.option("--port", default=5000, help="Server port.")
def vis(cell_stack, cell_data, port):
    """Visualize UMAP embedding of cells"""
    from asym.vis import prepare_server
    from bokeh.application import Application
    from bokeh.application.handlers.function import FunctionHandler
    from bokeh.server.server import Server
    import pandas as pd

    input_data = pd.read_csv(cell_data, index_col=False)
    cell_stack = np.load(cell_stack)

    apps = {
        "/": Application(
            FunctionHandler(
                partial(
                    prepare_server,
                    cell_stack=cell_stack,
                    input_data=input_data,
                )
            )
        )
    }
    server = Server(apps, port=port)
    server.run_until_shutdown()


if __name__ == "__main__":
    cli()
