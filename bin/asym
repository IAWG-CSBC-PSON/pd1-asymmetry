#!/usr/bin/env python3

import click
import asym


@click.group()
def cli():
    pass


@cli.command()
@click.argument("cell_stack", type=click.File("r"))
@click.argument(
    "output_path", type=click.Path(file_okay=False, dir_okay=True, resolve_path=True)
)
@click.option("--tensor_size", default=50, help="Size of reduced dimension.")
@click.option("--epochs", default=1, help="Number of epochs used for training.")
def train(cell_stack, output_path, tensor_size, epochs):
    """Train autoencoder network"""
    print(cell_stack)


@cli.command()
@click.argument("cell_stack", type=click.File("rb"))
@click.argument("cell_data", type=click.File("r"))
@click.option("--port", default=5000, help="Server port.")
def vis(cell_stack, cell_data, port):
    """Visualize UMAP embedding of cells"""
    from bokeh.application import Application
    from bokeh.application.handlers.function import FunctionHandler
    from bokeh.server.server import Server
    from functools import partial
    from asym.vis import prepare_server

    apps = {
        "/": Application(
            FunctionHandler(
                partial(
                    prepare_server,
                    cell_stack_file=cell_stack,
                    input_data_file=cell_data,
                )
            )
        )
    }
    server = Server(apps, port=port)
    server.run_until_shutdown()


if __name__ == "__main__":
    cli()
